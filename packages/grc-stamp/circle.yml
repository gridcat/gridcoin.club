version: 2

defaults: &defaults
  working_directory: ~/app
  docker:
    - image: circleci/node:14

jobs:
  build:
    <<: *defaults
    steps:
      - checkout
      - restore_cache:
          keys:
          - v1-dependencies-{{ checksum "package.json" }}-{{ checksum "packages/grc-stamp/package.json" }} # fallback to using the latest cache if no exact match is found
          - v1-dependencies-
      - run: npm install
      - run: cd ~/app/packages/grc-stamp && npm install
      - run: cd ~/app/packages/grc-stamp && npm run build
      - save_cache:
          paths:
            - ~/app/packages/grc-stamp/node_modules
            - ~/app/node_modules
          key: v1-dependencies-{{ checksum "package.json" }}-{{ checksum "packages/grc-stamp/package.json" }}
      - persist_to_workspace:
          root: ~/app
          paths: .

  run_typecheck:
    <<: *defaults
    steps:
      - attach_workspace:
          at: ~/app
      - run:
          name: Run typechecks
          command: cd ~/app/packages/grc-stamp && npm run typecheck

  test:
    <<: *defaults
    docker:
      - image: circleci/node:12
      - image: circleci/mysql:5.7
        environment:
          MYSQL_RANDOM_ROOT_PASSWORD: true
          MYSQL_USER: test
          MYSQL_PASSWORD: test
          MYSQL_DATABASE: test
    steps:
      - attach_workspace:
          at: ~/app
      - run:
          name: Wait for mysql
          command: sleep 7
      - run:
          name: Run tests
          command: cd ~/app/packages/grc-stamp && npm test

  lint_commit_message:
    <<: *defaults
    steps:
      - attach_workspace:
          at: ~/app
      - run:
          name: Define environment variable with lastest commit's message
          command: |
            cd ~/app
            echo 'export COMMIT_MESSAGE=$(git log -1 --pretty=format:"%s")' >> $BASH_ENV
            source $BASH_ENV
      - run:
          name: Lint commit message
          command: echo "$COMMIT_MESSAGE" | npx commitlint

  release:
    <<: *defaults
    steps:
      - attach_workspace:
          at: ~/app
      - run:
          name: Trust this ssh key
          command: mkdir -p ~/.ssh/ && touch ~/.ssh/known_hosts && ssh-keyscan github.com >> ~/.ssh/known_hosts
      - run:
          name: Semantic release
          command: cd ~/app/packages/grc-stamp && npm run semantic-release

  build_image:
    <<: *defaults
    docker:
      - image: docker:17.05.0-ce-git
    steps:
      - checkout
      - run:
          name: Get the recent changes
          command: git pull origin master
      - setup_remote_docker:
          version: 19.03.13
      - run:
          name: Install dependencies
          command: apk add --no-cache jq
      - restore_cache:
          keys:
            - v1-{{ .Branch }}
          paths:
            - /caches/app.tar
      - run:
          name: Load Docker image layer cache
          command: |
            set +o pipefail
            docker load -i /caches/app.tar | true
      - run:
          name: Build application Docker image
          command: |
            cd ~/app/packages/grc-stamp && docker build --cache-from=app -t app -f Dockerfile.prod .
      - run:
          name: Save Docker image layer cache
          command: |
            mkdir -p /caches
            cd ~/app/packages/grc-stamp && docker save -o /caches/app.tar app
      - deploy:
          name: Push application Docker image
          command: |
            docker login ghcr.io -u gridcat -p${CR_PAT}
            docker tag app "ghcr.io/gridcat/$(jq -r '.name' package.json):$(jq -r '.version' package.json)"
            docker push "ghcr.io/gridcat/$(jq -r '.name' package.json):$(jq -r '.version' package.json)"
            docker tag app "ghcr.io/gridcat/$(jq -r '.name' package.json):latest"
            docker push "ghcr.io/gridcat/$(jq -r '.name' package.json):latest"


workflows:
  version: 2
  build-and-deploy:
    jobs:
      - build
      - lint_commit_message:
          requires:
            - build

      - run_typecheck:
          requires:
            - build

      - test:
          requires:
            - build

      - release:
          context: semantic-release
          filters:
            branches:
              only: master
          requires:
            - build
            - run_typecheck
            - lint_commit_message
            - test

      - build_image:
          filters:
            branches:
              only: master
          requires:
            - release
          context: git-container-registry
